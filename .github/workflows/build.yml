name: iOS starter workflow

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches:
      - main
    paths:
      - "**/*.swift"
      - "**/*.yml"
  pull_request:
    branches:
      - main
    paths:
      - "**/*.swift"
      - "**/*.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
          key: deriveddata-${{ runner.os }}-${{ '**/*.xcodeproj', '**/*.xcworkspace', '**/Package.resolved') }}
          restore-keys: |
            deriveddata-${{ runner.os }}-

      - name: Debug Xcode Version
        run: xcodebuild -version

      - name: Select Xcode Version
        run: sudo xcode-select -s "/Applications/Xcode_16.4.app"

      - name: Debug Available Simulators
        run: xcrun simctl list devices

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      - name: Build
        id: buildstep
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ -n "$(ls -A | grep -i \\.xcworkspace\$)" ]; then filetype_parameter="workspace" && file_to_build=$(ls -A | grep -i \\.xcworkspace\$); else filetype_parameter="project" && file_to_build=$(ls -A | grep -i \\.xcodeproj\$); fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          xcodebuild -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=iPhone 16 Pro,OS=18.4"

  label-build-status:
    needs: build
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Add build-pass label if build succeeded
        if: ${{ needs.build.result == 'success' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['build-pass']
            })
            await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: 'build-fail'
            }).catch(e => {
                if (e.status !== 404) throw e
            })
      - name: Add build-fail label if build failed
        if: ${{ needs.build.result == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['build-fail']
            })
            await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: 'build-pass'
            }).catch(e => {
                if (e.status !== 404) throw e
            })
